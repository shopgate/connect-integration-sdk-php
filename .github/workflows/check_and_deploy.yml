name: Run tests, dependency audit, CS fixer & deploy
on: ['push']
jobs:
  check:
    name: Audit & code style checks
    runs-on: ubuntu-20.04
    steps:
      - name: Check out repository code
        uses: actions/checkout@v3
      - name: Install PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.2
      - name: Install dependencies & audit
        run: composer install
      - name: Audit
        run: composer audit
      - name: Code Style
        run: composer cs-fixer-dry
        env:
          PHP_CS_FIXER_IGNORE_ENV: 1

  test:
    name: Unit tests on PHP ${{ matrix.php-versions }}
    needs: [check]
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        php-versions: ['5.6', '7.0', '7.1', '7.2', '7.3', '7.4', '8.0', '8.1', '8.2']
    steps:
      - name: Check out repository code
        uses: actions/checkout@v3
      - name: Install PHP
        if: ${{ matrix.php-versions != '8.2' }}
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-versions }}
          coverage: none
      - name: Install PHP with Xdebug coverage support
        if: ${{ matrix.php-versions == '8.2' }}
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-versions }}
          coverage: xdebug
      - name: Install dependencies
        run: composer install
      - name: Test
        if: ${{ matrix.php-versions != '8.2' }}
        run: composer unit-tests
      - name: Test & generate coverage
        if: ${{ matrix.php-versions == '8.2' }}
        run: composer cover-clover
      - name: Persist coverage
        if: ${{ matrix.php-versions == '8.2' }}
        uses: actions/upload-artifact@v3
        with:
          name: coverage
          path: ./build/clover.xml

  coverage:
    name: Upload coverage to Coveralls
    needs: [test]
    runs-on: ubuntu-latest
    steps:
      - name: Restore coverage
        uses: actions/download-artifact@v3
        with:
          name: coverage
          path: ./build
      - name: Upload to Coveralls
        uses: coverallsapp/github-action@v2
        with:
          github-token: ${{ github.token }}
          file: ./build/clover.xml

  build:
    name: Build ZIP files
    needs: [check, test]
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        php-versions: [ '5.6', '7.4', '8.2' ]
    if: startsWith(github.ref, 'refs/tags/') # only tags
    steps:
      - name: Get tag name
        id: set-tag
        run: echo "TAG_NAME=${GITHUB_REF:10}" >> $GITHUB_OUTPUT
      - name: Check out repository code
        uses: actions/checkout@v3
      - name: Install PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-versions }}
      - name: Build ZIP
        run: ./release/build_release_package.sh ${{ matrix.php-versions }}
      - name: Show directories
        run: ls -al ./ && ls -al ./build && ls -al ./release
      - name: Persist ZIP file
        uses: actions/upload-artifact@v3
        with:
          name: release-files
          path: ./shopgate-cart-integration-sdk-php-${{ matrix.php-versions }}.zip

  release:
    name: Release
    needs: [build]
    runs-on: ubuntu-20.04
    if: startsWith(github.ref, 'refs/tags/') # only tags
    steps:
      - name: Restore ZIP files
        uses: actions/download-artifact@v3
        with:
          name: release-files
      - name: Release & upload
        id: create_release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.set-tag.outputs.TAG_NAME }}
          name: Shopgate Connect Integration SDK (PHP) version ${{ steps.set-tag.outputs.TAG_NAME }}
          draft: true
          prerelease: true
          fail_on_unmatched_files: true
          files: |
            ./shopgate-cart-integration-sdk-php-5.6.zip
            ./shopgate-cart-integration-sdk-php-7.4.zip
            ./shopgate-cart-integration-sdk-php-8.2.zip

  notify-release-success:
    name: Notify developers of new release
    needs: [release]
    runs-on: ubuntu-20.04
    if: |
      success() &&
      startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Get tag name
        id: set-tag
        run: echo "TAG_NAME=${GITHUB_REF:10}" >> $GITHUB_OUTPUT
      - name: Notify on Slack
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_MERCHANT_UNIT }}
          SLACK_USERNAME: 'GitHub Actions'
          SLACK_ICON_EMOJI: ':octocat:'
          SLACK_TITLE: New release for ${{ github.repository }}
          SLACK_MESSAGE: Released version ${{ steps.set-tag.outputs.TAG_NAME }} of ${{ github.repository }}

  notify-release-fail:
    name: Notify developers of failed release
    needs: [release]
    runs-on: ubuntu-20.04
    if: |
      failure() &&
      startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Get tag name
        id: set-tag
        run: echo "TAG_NAME=${GITHUB_REF:10}" >> $GITHUB_OUTPUT
      - name: Notify on Slack
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_MERCHANT_UNIT }}
          SLACK_USERNAME: 'GitHub Actions'
          SLACK_ICON_EMOJI: ':octocat:'
          SLACK_COLOR: '#A30200'
          SLACK_TITLE: Release failed for ${{ github.repository }}
          SLACK_MESSAGE: Release failed for version ${{ steps.set-tag.outputs.TAG_NAME }} of ${{ github.repository }}
